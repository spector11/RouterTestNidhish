{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","AboutUs","ContactUs","Home","Topics","match","useRouteMatch","to","url","path","Topic","URLSearchParams","useLocation","search","data","useParams","companyID","topicId","App","className","basename","process","exact","component","Boolean","window","location","hostname","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,gLCO3C,SAASC,IACP,OACE,oDAMJ,SAASC,IACP,OACE,sDAIJ,SAASC,IACP,OACE,gDAQJ,SAASC,IAEP,IAAIC,EAAQC,cAEZ,OACE,6BACE,6CACA,4BACE,4BAAI,kBAAC,IAAD,CAAMC,GAAE,UAAKF,EAAMG,IAAX,oBAAR,YACJ,4BAAI,kBAAC,IAAD,CAAMD,GAAE,UAAKF,EAAMG,IAAX,oBAAR,WAGN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAI,UAAKJ,EAAMI,KAAX,yBACT,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAI,UAAKJ,EAAMI,OACpB,sDASV,SAASC,IA7BA,IAAIC,gBAAgBC,cAAcC,QA+BzC,IAEIC,EAAOC,cACX,OAAQ,oCACN,sDAA4BD,EAAKE,UAAjC,KACA,mDAAyBF,EAAKG,UA0CnBC,MAnCf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CAAQC,SAAUC,sBAAwB,6BACxC,4BACA,qCACE,4BAAI,kBAAC,IAAD,CAAMd,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,eAAT,eACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,aAAT,aACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,WAAT,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,uBAAT,cAGN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOe,OAAK,EAACb,KAAK,YAAYc,UAAWtB,IACzC,kBAAC,IAAD,CAAOqB,OAAK,EAACb,KAAK,eAChB,kBAACP,EAAD,OAEF,kBAAC,IAAD,CAAOoB,OAAK,EAACb,KAAK,UAAUc,UAAWnB,IACvC,kBAAC,IAAD,CAAOkB,OAAK,EAACb,KAAK,KAChB,kBAACN,EAAD,OAEF,kBAAC,IAAD,CAAOM,KAAK,KACX,+CCnFOe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStB,MACvB,2D,MCXcuB,IAAMC,UA2D1BC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiE3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5b5f238e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link, useRouteMatch, useParams, useLocation } from \"react-router-dom\";\nimport { func } from 'prop-types';\nimport { homedir } from 'os';\n\nfunction AboutUs() {\n  return (\n    <div>\n      Hello From About us\n    </div>\n  )\n}\n\nfunction ContactUs() {\n  return (\n    <div>Hello from Contact Us</div>\n  )\n}\n\nfunction Home() {\n  return (\n    <div>Hello from Home</div>\n  )\n}\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nfunction Topics() {\n\n  let match = useRouteMatch();\n\n  return (\n    <div>\n      <h1>Choose topics</h1>\n      <ul>\n        <li><Link to={`${match.url}/angular/google`}>Angular</Link></li>\n        <li><Link to={`${match.url}/react/facebook`}>React</Link></li>\n      </ul>\n\n      <Switch>\n        <Route path={`${match.path}/:topicId/:companyID`} >\n          <Topic />\n        </Route>\n        <Route path={`${match.path}`}>\n          <h1>Please choose topic</h1>\n        </Route>\n\n      </Switch>\n\n    </div>\n  )\n}\n\nfunction Topic() {\n  debugger\n  var x = useQuery()\n debugger\n  let data = useParams();\n  return (<>\n    <h3>Requested company ID : {data.companyID} </h3>\n    <h3>Requested topic ID: {data.topicId}</h3>\n  </>\n  );\n}\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Router basename={process.env.PUBLIC_URL}><nav>\n          <ul>\n          <li>Teest</li>\n            <li><Link to=\"/\">Home</Link></li>\n            <li><Link to=\"/contact-us\">Contact Us</Link></li>\n            <li><Link to=\"/about-us\">About Us</Link></li>\n            <li><Link to=\"/topics\">Topics</Link></li>\n            <li><Link to=\"/subject?name=maths\">Subject</Link></li>\n          </ul>\n        </nav>\n          <Switch>\n            <Route exact path=\"/about-us\" component={AboutUs} />\n            <Route exact path=\"/contact-us\">\n              <ContactUs />\n            </Route>\n            <Route exact path=\"/topics\" component={Topics} />\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"*\">\n             <h1>Not found</h1>\n            </Route>\n          </Switch>\n\n        </Router>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WindowResize from './Test'\n\nclass Other extends React.Component\n{\n  constructor(props) {\n    super(props)\n    this.state = { username: \"\" };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleAuth = this.handleAuth.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({ username: e.target.value })\n  }\n\n  handleAuth() {\n    debugger\n    const challenge = new Uint8Array(32);\n    const userId = new Uint8Array(32);\n    crypto.getRandomValues(challenge);\n    crypto.getRandomValues(userId);\n    try {\n      return navigator.credentials.create({\n        publicKey: {\n          rp: {\n            name: \"Auth0 WebAuthn Playground\"\n          },\n          user: {\n            id: userId,\n            name: this.state.username,\n            displayName: this.state.username\n          },\n          challenge: challenge,\n          pubKeyCredParams: [\n            {\n              type: \"public-key\",\n              alg: -7 // ES256\n            }\n          ],\n          timeout: 15 * 1000\n        }\n      });\n    }\n    catch (e) {\n      debugger\n      console.log(e)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" onChange={this.handleChange} />\n        {this.state.username}\n        <button onClick={this.handleAuth}>Hello</button>\n      </div>\n    )\n  }\n}\n\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}